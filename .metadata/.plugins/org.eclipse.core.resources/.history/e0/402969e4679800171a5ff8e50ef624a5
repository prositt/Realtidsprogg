package todo;

import done.ClockInput;
import done.ClockOutput;
import se.lth.cs.realtime.semaphore.MutexSem;
import se.lth.cs.realtime.semaphore.Semaphore;

public class ButtonThread extends Thread {

	private ClockInput	in;
	private ClockOutput	out;
	private Semaphore	sig;

	private Semaphore	signal, mutex;

	SharedData data;

	ButtonThread(ClockInput	input,	SharedData data){
		in = input;
		this.data = data;
		signal = input.getSemaphoreInstance();
		mutex = data.getMutex();
	}

	@Override
	public void run() {
		int prevChoice = 0;
		
		int poop = 0;
		while(true){


			signal.take();

			data.alarmStatus(in.getAlarmFlag());

			int choice = in.getChoice();
			if(choice!=0){
				prevChoice = choice;
				if(poop<1){
				mutex.take();
				poop++;	
				}
				
				
				System.out.println("mutex taken");
			} 

			// CRITICAL START
			if(choice==0){
				if(prevChoice == 1){
					data.setAlarm(in.getValue());
					System.out.println("case 1");
					mutex.give();
					poop--;
				}
				if(prevChoice ==2){
					data.setClockTime(in.getValue());
					System.out.println("case 2");
					mutex.give();
					poop--;
				}
			}
			//CRITICAL END

		}


	}

}




